[
    {
        "id": "dae29d0432198ee9",
        "type": "tab",
        "label": "Get electricity price and sensor data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f61c2b29ea14be48",
        "type": "tab",
        "label": "Test MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "92e6fe23111f8499",
        "type": "tab",
        "label": "Calculate electricity bill",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "068878340fe2503c",
        "type": "tab",
        "label": "Telegram",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a0e1bc1a96c71d2f",
        "type": "tab",
        "label": "Actuator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae2aceeadfb4b296",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e38ada7c23eea3a7",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "ab54eb197c955ed0",
        "type": "mqtt-broker",
        "name": "MQTT docker",
        "broker": "tcp://host.docker.internal",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5bc7043e36b5ea36",
        "type": "influxdb",
        "hostname": "host.docker.internal",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://host.docker.internal:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "c746fed15930be8e",
        "type": "telegram bot",
        "botname": "Peakflip",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "1c5203f54951bf7a",
        "type": "inject",
        "z": "dae29d0432198ee9",
        "name": "Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "c9bdb6d2675a3b81"
            ]
        ]
    },
    {
        "id": "b2f8793ee7d3d83d",
        "type": "function",
        "z": "dae29d0432198ee9",
        "name": "Parse data",
        "func": "let prices = JSON.parse(msg.payload).multiAreaEntries;\nlet formattedData = prices.map(price => {\n    return {\n        measurement: \"electricity_price\",\n        tags: {\n            \"deliveryArea\": \"FI\",\n            \"currency\": \"EUR\"\n        },\n        fields: {\n            \"price\": price.entryPerArea.FI // The price value, assuming it's in 'price'\n        },\n        timestamp: new Date(price.deliveryStart).getTime() // Convert to nanoseconds\n    };\n});\n\n// Return the formatted data as msg.payload (Array of points for InfluxDB)\nmsg.payload = formattedData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "b49d4bb8c8beb9b6",
                "da11170d9ba45afb"
            ]
        ]
    },
    {
        "id": "b49d4bb8c8beb9b6",
        "type": "debug",
        "z": "dae29d0432198ee9",
        "name": "Debug parsed data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "bf7324f2aabd204b",
        "type": "http request",
        "z": "dae29d0432198ee9",
        "name": "Get spot price",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dataportal-api.nordpoolgroup.com/api/DayAheadPrices?date={{{date}}}&market=DayAhead&deliveryArea=FI&currency=EUR",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 100,
        "wires": [
            [
                "b2f8793ee7d3d83d"
            ]
        ]
    },
    {
        "id": "c9bdb6d2675a3b81",
        "type": "function",
        "z": "dae29d0432198ee9",
        "name": "Set date parameter",
        "func": "const today = new Date();\nconst yyyy = today.getFullYear();\nconst mm = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based\nconst dd = String(today.getDate()).padStart(2, '0');\n\nmsg.dateParam = `${yyyy}-${mm}-${dd}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            [
                "c11980994d52b0f1"
            ]
        ]
    },
    {
        "id": "c11980994d52b0f1",
        "type": "change",
        "z": "dae29d0432198ee9",
        "name": "Change date parameter",
        "rules": [
            {
                "t": "set",
                "p": "date",
                "pt": "msg",
                "to": "dateParam",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "bf7324f2aabd204b"
            ]
        ]
    },
    {
        "id": "da11170d9ba45afb",
        "type": "influxdb batch",
        "z": "dae29d0432198ee9",
        "influxdb": "5bc7043e36b5ea36",
        "precision": "",
        "retentionPolicy": "",
        "name": "Save spot price to InfluxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "b6b5d27157600e77",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "e485b1a2f8e01daf"
            ]
        ]
    },
    {
        "id": "46b3552681a72602",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_1/water_temperature",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "3726dd759abf57ad",
        "type": "mqtt in",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_1/water_temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab54eb197c955ed0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 380,
        "wires": [
            [
                "60e579584b183408"
            ]
        ]
    },
    {
        "id": "60e579584b183408",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "function 2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "bd44fa3d34bb1af9"
            ]
        ]
    },
    {
        "id": "bd44fa3d34bb1af9",
        "type": "debug",
        "z": "f61c2b29ea14be48",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "e485b1a2f8e01daf",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate water temperature",
        "func": "let temperature = Math.random() * (25 - 15) + 15;\nmsg.payload = {\n    \"water_temperature\": temperature\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "46b3552681a72602"
            ]
        ]
    },
    {
        "id": "8c2bd301882ad0e0",
        "type": "influxdb out",
        "z": "f61c2b29ea14be48",
        "influxdb": "5bc7043e36b5ea36",
        "name": "",
        "measurement": "test",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "d0c890d79b973527",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "a8bab6bb8b645186"
            ]
        ]
    },
    {
        "id": "9f8ffebcd43f3319",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_1/water_level",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "a8bab6bb8b645186",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate water level",
        "func": "let water_level = Math.random() * (200 - 100) + 100;\nmsg.payload = {\n    \"water_level\": water_level\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "9f8ffebcd43f3319"
            ]
        ]
    },
    {
        "id": "2c0416c6bcb21fee",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "83f91115bfa8ba23"
            ]
        ]
    },
    {
        "id": "58c59337239ba2df",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_1/outside_temperature",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "83f91115bfa8ba23",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate outside temperature",
        "func": "let tmp = Math.random() * (20 - 10) + 10;\nmsg.payload = {\n    \"outside_temperature\": tmp\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "58c59337239ba2df"
            ]
        ]
    },
    {
        "id": "67144ee9599e8e40",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "25df984b54a94f6c"
            ]
        ]
    },
    {
        "id": "39ce3d6625e0d1b1",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_1/electricity_consumption",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "25df984b54a94f6c",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate consumed electricity",
        "func": "let tmp = Math.random() * 10;\nmsg.payload = {\n    \"electricity_consumption\": tmp\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "39ce3d6625e0d1b1"
            ]
        ]
    },
    {
        "id": "a0d40e10964c0981",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "d0c599420ca5aeaa"
            ]
        ]
    },
    {
        "id": "44f05c6d6a197422",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_2/water_temperature",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 750,
        "y": 540,
        "wires": []
    },
    {
        "id": "d0c599420ca5aeaa",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate water temperature",
        "func": "let temperature = Math.random() * (25 - 15) + 15;\nmsg.payload = {\n    \"water_temperature\": temperature\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "44f05c6d6a197422"
            ]
        ]
    },
    {
        "id": "b1efd36f9ec02832",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "b62720cdf6139c14"
            ]
        ]
    },
    {
        "id": "c3ac45733d5e2e8c",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_2/electricity_consumption",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 750,
        "y": 600,
        "wires": []
    },
    {
        "id": "b62720cdf6139c14",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate consumed electricity",
        "func": "let tmp = Math.random() * 10;\nmsg.payload = {\n    \"electricity_consumption\": tmp\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "c3ac45733d5e2e8c"
            ]
        ]
    },
    {
        "id": "d79420a5f7c0509a",
        "type": "inject",
        "z": "f61c2b29ea14be48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "c18157e6b2109f92"
            ]
        ]
    },
    {
        "id": "f89f6e62037e44d3",
        "type": "mqtt out",
        "z": "f61c2b29ea14be48",
        "name": "",
        "topic": "/home_1/device_2/water_level",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 690,
        "y": 660,
        "wires": []
    },
    {
        "id": "c18157e6b2109f92",
        "type": "function",
        "z": "f61c2b29ea14be48",
        "name": "Generate water level",
        "func": "let water_level = Math.random() * (200 - 100) + 100;\nmsg.payload = {\n    \"water_level\": water_level\n}; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "f89f6e62037e44d3"
            ]
        ]
    },
    {
        "id": "07aa600166cdc16e",
        "type": "inject",
        "z": "92e6fe23111f8499",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "db811a4e9d3a0247",
                "ad239bb6dac6208f"
            ]
        ]
    },
    {
        "id": "db811a4e9d3a0247",
        "type": "influxdb in",
        "z": "92e6fe23111f8499",
        "influxdb": "5bc7043e36b5ea36",
        "name": "",
        "query": "from(bucket: \"se4iot\")\n|> range(start: -1h)\n|> filter(fn: (r) => r[\"_measurement\"] == \"electricity_price\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "4c1c0ac8738f9c95"
            ]
        ]
    },
    {
        "id": "91ec816acad15318",
        "type": "debug",
        "z": "92e6fe23111f8499",
        "name": "Debug price data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "56c20701c5f85735",
        "type": "function",
        "z": "92e6fe23111f8499",
        "name": "Total electricity used",
        "func": "function roundUpToDecimals(number, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.ceil(number * factor) / factor;\n}\n\nlet rawDataList = msg.payload;\nconst regex = /\\/([^/]+)\\/([^/]+)/;\n\nlet dataMap = rawDataList.reduce((acc, obj) => {\n  // Generate a unique key using Key1 and key2\n  const key = obj.topic;\n\n  // Check if the group (key) already exists in accumulator\n  if (!acc[key]) {\n    const match = key.match(regex);\n\n    if (match) {\n      const home = match[1]; // home_1\n      const device = match[2]; // device_1\n      // If not, initialize the group with the current object\n      acc[key] = { home: home, device: device, value: 0 };\n    }\n  }\n\n  // Add the value to the corresponding group\n  acc[key].value += obj._value;\n\n  return acc;\n}, {});\n// let dataList = rawDataList.map(data => {\n//     return data._value\n// });\n\n// Return the sum\n// msg.payload = roundUpToDecimals(dataList.reduce((accumulator, currentValue) => accumulator + currentValue, 0), 2);\nmsg.payload = Object.values(dataMap);\nmsg.topic = \"electricity_consumption\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "0e9f90eb60ed85cc"
            ]
        ]
    },
    {
        "id": "ad239bb6dac6208f",
        "type": "influxdb in",
        "z": "92e6fe23111f8499",
        "influxdb": "5bc7043e36b5ea36",
        "name": "",
        "query": "from(bucket: \"se4iot\")\n|> range(start: -10s)\n|> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\" and r[\"_field\"] == \"electricity_consumption\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 360,
        "y": 240,
        "wires": [
            [
                "56c20701c5f85735"
            ]
        ]
    },
    {
        "id": "413837d91a6f574f",
        "type": "debug",
        "z": "92e6fe23111f8499",
        "name": "Debug consumption data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "0e9f90eb60ed85cc",
        "type": "join",
        "z": "92e6fe23111f8499",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 830,
        "y": 180,
        "wires": [
            [
                "5956a9fe02917ad7"
            ]
        ]
    },
    {
        "id": "de51da257ed11686",
        "type": "debug",
        "z": "92e6fe23111f8499",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 180,
        "wires": []
    },
    {
        "id": "5956a9fe02917ad7",
        "type": "function",
        "z": "92e6fe23111f8499",
        "name": "Energy cost by device",
        "func": "let price = msg.payload.price;\nlet consumptionList = msg.payload.electricity_consumption; // 42\n\n// EUR = EUR/MWh * Wh / 10e6\nlet costList = consumptionList.map(data => {\n    return {\n        measurement: \"electricity_cost\",\n        tags: {\n            \"home\": data.home,\n            \"device\": data.device,\n            \"currency\": \"EUR\"\n        },\n        fields: {\n            \"cost\": data.value * price / 1000000\n        },\n        timestamp: new Date().getTime()\n    };\n});\nmsg.payload = costList;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "de51da257ed11686",
                "7b88b269e79082a4"
            ]
        ]
    },
    {
        "id": "4c1c0ac8738f9c95",
        "type": "function",
        "z": "92e6fe23111f8499",
        "name": "Price",
        "func": "msg.payload = msg.payload[0]._value;\nmsg.topic = \"price\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "0e9f90eb60ed85cc"
            ]
        ]
    },
    {
        "id": "7b88b269e79082a4",
        "type": "influxdb batch",
        "z": "92e6fe23111f8499",
        "influxdb": "5bc7043e36b5ea36",
        "precision": "",
        "retentionPolicy": "",
        "name": "Save cost to InfluxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 1100,
        "y": 240,
        "wires": []
    },
    {
        "id": "c8946da30ba260ac",
        "type": "telegram sender",
        "z": "068878340fe2503c",
        "name": "",
        "bot": "c746fed15930be8e",
        "haserroroutput": false,
        "outputs": 1,
        "x": 600,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "46e21abc428a8c91",
        "type": "telegram receiver",
        "z": "068878340fe2503c",
        "name": "",
        "bot": "c746fed15930be8e",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "c60247538ac52a4f"
            ],
            []
        ]
    },
    {
        "id": "2e53fe86a63f2524",
        "type": "function",
        "z": "068878340fe2503c",
        "name": "Telegram Message",
        "func": "let priceArr = msg.payload\n\nmsg.payload = {}\nmsg.payload.chatId = global.get(\"ChatID\");\nmsg.payload.type = \"message\";\n\nmsg.payload.content = priceArr.map(x => {\n    let date = new Date(x._time); \n    let hours = date.getUTCHours(); \n    let minutes = date.getUTCMinutes(); \n    let ampm = hours >= 12 ? \"PM\" : \"AM\";\n    hours = hours % 12 || 12; \n    minutes = minutes < 10 ? \"0\" + minutes : minutes; \n\n    return {\n        time: `${hours}:${minutes} ${ampm}`,\n        value: x._value\n    };\n});\n\nmsg.payload.content = msg.payload.content\n    .map(item => `Time: ${item.time}, Value: ${item.value}`)\n    .join(\"; \\n\");\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "c8946da30ba260ac"
            ]
        ]
    },
    {
        "id": "c60247538ac52a4f",
        "type": "function",
        "z": "068878340fe2503c",
        "name": "Set ChatID",
        "func": "msg.payload.content === \"/start\" ? global.set(\"ChatID\", msg.payload.chatId) : \"\";\nmsg.payload = global.get(\"ChatID\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "50ee66b67f5340bf"
            ]
        ]
    },
    {
        "id": "50ee66b67f5340bf",
        "type": "debug",
        "z": "068878340fe2503c",
        "name": "Show ChatID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "fd555ec6ee3b2d51",
        "type": "inject",
        "z": "068878340fe2503c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "51d4513897f618f9"
            ]
        ]
    },
    {
        "id": "51d4513897f618f9",
        "type": "influxdb in",
        "z": "068878340fe2503c",
        "influxdb": "5bc7043e36b5ea36",
        "name": "Get Electricity Consumption",
        "query": "from(bucket: \"se4iot\")\n|> range(start: -6h)\n|> filter(fn: (r) => r[\"_measurement\"] == \"electricity_price\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "2e53fe86a63f2524"
            ]
        ]
    },
    {
        "id": "76310f54410d763f",
        "type": "mqtt in",
        "z": "a0e1bc1a96c71d2f",
        "name": "",
        "topic": "/+/+/water_level",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab54eb197c955ed0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 40,
        "wires": [
            [
                "e48f6483c45e6329"
            ]
        ]
    },
    {
        "id": "e48f6483c45e6329",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Water pump decision",
        "func": "const regex = /\\/([^/]+)\\/([^/]+)/;\nconst match = msg.topic.match(regex);\n\nif (match) {\n    const home = match[1]; // home_1\n    const device = match[2]; // device_1\n    if (msg.payload.water_level < 150) {\n        msg.topic = `/${home}/${device}/pump`;\n        msg.payload = 1;\n    }\n    else {\n        msg.topic = `/${home}/${device}/pump`;\n        msg.payload = 0;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 40,
        "wires": [
            [
                "965d7599b055c1b2"
            ]
        ]
    },
    {
        "id": "965d7599b055c1b2",
        "type": "mqtt out",
        "z": "a0e1bc1a96c71d2f",
        "name": "Send message to actuator",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 740,
        "y": 40,
        "wires": []
    },
    {
        "id": "9960deac8953d26f",
        "type": "influxdb in",
        "z": "a0e1bc1a96c71d2f",
        "influxdb": "5bc7043e36b5ea36",
        "name": "Get electricity price",
        "query": "from(bucket: \"se4iot\")\n|> range(start: -1h)\n|> filter(fn: (r) => r[\"_measurement\"] == \"electricity_price\")\n|> last()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 370,
        "y": 120,
        "wires": [
            [
                "620d2338e07efdbf"
            ]
        ]
    },
    {
        "id": "75521254ebd67326",
        "type": "inject",
        "z": "a0e1bc1a96c71d2f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "9960deac8953d26f",
                "d903df0eb177ab52",
                "3d1d15627c61d774"
            ]
        ]
    },
    {
        "id": "d903df0eb177ab52",
        "type": "influxdb in",
        "z": "a0e1bc1a96c71d2f",
        "influxdb": "5bc7043e36b5ea36",
        "name": "Get water temperature",
        "query": "from(bucket: \"se4iot\")\n|> range(start: -15m)\n|> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\" and r[\"_field\"] == \"water_temperature\")\n|> last()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "7a10583985989a32"
            ]
        ]
    },
    {
        "id": "3d1d15627c61d774",
        "type": "influxdb in",
        "z": "a0e1bc1a96c71d2f",
        "influxdb": "5bc7043e36b5ea36",
        "name": "Get water level",
        "query": "from(bucket: \"se4iot\")\n|> range(start: -1h)\n|> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\" and r[\"_field\"] == \"water_level\")\n|> last()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "bc225aacbbfd9a77"
            ]
        ]
    },
    {
        "id": "519d3e4216cd34e9",
        "type": "debug",
        "z": "a0e1bc1a96c71d2f",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 220,
        "wires": []
    },
    {
        "id": "7a10583985989a32",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Water temperature",
        "func": "const regex = /\\/([^/]+)\\/([^/]+)/;\nmsg.payload = msg.payload.map( e => {\n        const match = e.topic.match(regex);\n        if (match) {\n                const home = match[1]; // home_1\n                const device = match[2]; // device_1\n                // If not, initialize the group with the current object\n                return { id: `/${home}/${device}`, value: e._value };\n                }\n                return {}\n});\nmsg.topic = \"water_temperature\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 220,
        "wires": [
            [
                "a7bce94a81f192a8"
            ]
        ]
    },
    {
        "id": "69bbb25de7aaa14e",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Group by device",
        "func": "function roundUpToDecimals(number, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.ceil(number * factor) / factor;\n}\n\nlet rawDataList = msg.payload;\nlet device_map = {}\n\nlet temperature_list = msg.payload.water_temperature;\nlet level_list = msg.payload.water_level;\n\ntemperature_list.forEach(function(e) {\n  device_map[e.id] = {};\n  device_map[e.id][\"id\"] = e.id;\n  device_map[e.id][\"temperature\"] = e.value;\n});\n\nlevel_list.forEach(function(e) {\n  device_map[e.id][\"level\"] = e.value;\n});\nmsg.payload = Object.values(device_map);\nmsg.topic = \"devices\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 280,
        "wires": [
            [
                "8ec4dc5f90d9b351",
                "fa6dde02f69d56bc"
            ]
        ]
    },
    {
        "id": "a7bce94a81f192a8",
        "type": "join",
        "z": "a0e1bc1a96c71d2f",
        "name": "Join by device",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 620,
        "y": 280,
        "wires": [
            [
                "69bbb25de7aaa14e"
            ]
        ]
    },
    {
        "id": "fa6dde02f69d56bc",
        "type": "debug",
        "z": "a0e1bc1a96c71d2f",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 360,
        "wires": []
    },
    {
        "id": "bc225aacbbfd9a77",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Water level",
        "func": "const regex = /\\/([^/]+)\\/([^/]+)/;\nmsg.payload = msg.payload.map( e => {\n        const match = e.topic.match(regex);\n        if (match) {\n                const home = match[1]; // home_1\n                const device = match[2]; // device_1\n                // If not, initialize the group with the current object\n                return { id: `/${home}/${device}`, value: e._value };\n                }\n                return {}\n});\nmsg.topic = \"water_level\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "a7bce94a81f192a8"
            ]
        ]
    },
    {
        "id": "031f62676f95c0a8",
        "type": "debug",
        "z": "a0e1bc1a96c71d2f",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 360,
        "wires": []
    },
    {
        "id": "620d2338e07efdbf",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Price",
        "func": "msg.payload = msg.payload[0]._value;\nmsg.topic = \"price\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "8ec4dc5f90d9b351"
            ]
        ]
    },
    {
        "id": "8ec4dc5f90d9b351",
        "type": "join",
        "z": "a0e1bc1a96c71d2f",
        "name": "Join price and devices",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "ad190dcfda8a1845"
            ]
        ]
    },
    {
        "id": "ad190dcfda8a1845",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Heater decision",
        "func": "let device_list = msg.payload.devices;\nlet price = msg.payload.price;\nlet messages = []\nlet payloads = []\nlet topics = []\n\n// TODO: decide on the logic\ndevice_list.forEach(function(e) {\n  if (e.temperature < 20 && e.level > 100) {\n    payloads.push(1);\n    topics.push(`${e.id}/heater`);\n    msg.topic = `${e.id}/heater`;\n    messages.push({ topic: `${e.id}/heater`, payload: 1})\n  }\n});\nmsg.payload = messages;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 240,
        "wires": [
            [
                "1cefa5aabedd17f3",
                "592cb6aa8c529f7c"
            ]
        ]
    },
    {
        "id": "22d328c47bafc061",
        "type": "mqtt out",
        "z": "a0e1bc1a96c71d2f",
        "name": "Send message to actuator",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab54eb197c955ed0",
        "x": 1500,
        "y": 240,
        "wires": []
    },
    {
        "id": "c996af533337a73c",
        "type": "mqtt in",
        "z": "a0e1bc1a96c71d2f",
        "name": "",
        "topic": "/+/+/heater",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab54eb197c955ed0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 480,
        "wires": [
            [
                "e501cfb78ff217e6"
            ]
        ]
    },
    {
        "id": "e501cfb78ff217e6",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "function 3",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "14fce2cd3786f894"
            ]
        ]
    },
    {
        "id": "14fce2cd3786f894",
        "type": "debug",
        "z": "a0e1bc1a96c71d2f",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 480,
        "wires": []
    },
    {
        "id": "1cefa5aabedd17f3",
        "type": "split",
        "z": "a0e1bc1a96c71d2f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1190,
        "y": 340,
        "wires": [
            [
                "0cec43d1695173e2"
            ]
        ]
    },
    {
        "id": "0cec43d1695173e2",
        "type": "function",
        "z": "a0e1bc1a96c71d2f",
        "name": "Refine message",
        "func": "return { payload: msg.payload.payload, topic: msg.payload.topic };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 300,
        "wires": [
            [
                "b1af63c3525cc672",
                "22d328c47bafc061"
            ]
        ]
    },
    {
        "id": "b1af63c3525cc672",
        "type": "debug",
        "z": "a0e1bc1a96c71d2f",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 340,
        "wires": []
    },
    {
        "id": "592cb6aa8c529f7c",
        "type": "debug",
        "z": "a0e1bc1a96c71d2f",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 180,
        "wires": []
    }
]